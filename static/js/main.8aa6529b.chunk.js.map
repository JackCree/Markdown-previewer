{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","setOptions","break","renderer","Renderer","link","href","title","text","App","props","state","markdown","placeholder","editorMaximized","previewMaximized","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","e","this","setState","target","value","classes","className","icon","onClick","onChange","React","Component","Toolbar","Editor","id","type","Preview","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yPAKAA,IAAOC,WAAW,CAChBC,OAAO,IAGT,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAASC,EAAMC,EAAOC,GACpC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAArC,Q,IAGHC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,SAAUC,EACVC,iBAAiB,EACjBC,kBAAkB,GAGpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAXb,E,gDAgBlB,SAAaG,GACXC,KAAKC,SAAS,CACZV,SAAUQ,EAAEG,OAAOC,U,kCAGvB,WACEH,KAAKC,SAAS,CACZR,iBAAkBO,KAAKV,MAAMG,oB,mCAGjC,WACEO,KAAKC,SAAS,CACZP,kBAAmBM,KAAKV,MAAMI,qB,oBAIlC,WACE,IAAMU,EAAUJ,KAAKV,MAAMG,gBACvB,CAAC,uBAAwB,mBAAoB,kBAC7CO,KAAKV,MAAMI,iBACT,CAAC,kBAAmB,wBAAyB,kBAC7C,CAAC,aAAc,cAAe,oBAEpC,OACE,gCACE,sBAAKW,UAAWD,EAAQ,GAAxB,UACE,cAAC,EAAD,CACEE,KAAMF,EAAQ,GACdG,QAAWP,KAAKH,qBAChBV,KAAK,WAEP,cAAC,EAAD,CAAQI,SAAUS,KAAKV,MAAMC,SAAUiB,SAAUR,KAAKL,kBAExD,qBAAKU,UAAU,cACf,sBAAKA,UAAWD,EAAQ,GAAxB,UACE,cAAC,EAAD,CACEE,KAAMF,EAAQ,GACdG,QAASP,KAAKF,sBACdX,KAAK,cAEP,cAAC,EAAD,CAASI,SAAWS,KAAKV,MAAMC,qB,GAzDvBkB,IAAMC,WAgElBC,EAAU,SAAAtB,GACd,OACE,sBAAKgB,UAAU,UAAf,UACE,mBAAGA,UAAU,uBAAuBnB,MAAM,qBACzCG,EAAMF,KACP,mBAAGkB,UAAWhB,EAAMiB,KAAMC,QAASlB,EAAMkB,cAKzCK,EAAS,SAAAvB,GACb,OACE,0BACEwB,GAAG,SACHL,SAAUnB,EAAMmB,SAChBM,KAAK,OACLX,MAAOd,EAAME,YAKbwB,EAAU,SAAA1B,GACd,OACE,qBACE2B,wBAAyB,CACvBC,OAAQtC,IAAOU,EAAME,SAAU,CAAET,SAAUA,KAE7C+B,GAAG,aAKHrB,EAAW,ujCA2CFJ,IC7IA8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,QAKjDZ,M","file":"static/js/main.8aa6529b.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\n\nconst projectName = 'markdown-previewer';\n\nmarked.setOptions({\n  break: true\n});\n\nconst renderer = new marked.Renderer();\nrenderer.link = function(href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + `</a>`;\n};\n\nclass App extends React.Component {\n  constructor(props){\n    super(props) \n    //declaration of the variable\n    this.state = {\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false\n    };\n    //Declaration of the methods\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n  //Declaration of the functions : 1. Get the value in the textarea to markdown\n  //                               2. Change the boolean value of editorMaximized\n  //                               3. Change the boolean value of previewMaximized\n  handleChange(e){\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  handleEditorMaximize(){\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n  handlePreviewMaximize(){\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n  //Modelization of the component\n  render(){ \n    const classes = this.state.editorMaximized \n      ? ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress'] \n      : this.state.previewMaximized\n        ? ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress']\n        : ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];    \n\n    return(\n      <div>\n        <div className={classes[0]}>\n          <Toolbar \n            icon={classes[2]}\n            onClick = {this.handleEditorMaximize}\n            text='Editor' \n          />\n          <Editor markdown={this.state.markdown} onChange={this.handleChange} />\n        </div>\n        <div className='converter'/>\n        <div className={classes[1]}>\n          <Toolbar \n            icon={classes[2]}\n            onClick={this.handlePreviewMaximize}\n            text='Previewer'\n          />\n          <Preview markdown= {this.state.markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Toolbar = props => {\n  return (\n    <div className='toolbar'>\n      <i className='fa fa-free-code-camp' title='no-stab-dub-sack' />\n      {props.text}\n      <i className={props.icon} onClick={props.onClick} />\n    </div>\n  );\n};\n\nconst Editor = props => {\n  return (\n    <textarea\n      id='editor'\n      onChange={props.onChange}\n      type='text'\n      value={props.markdown}\n    />\n  );\n};\n\nconst Preview = props => {\n  return (\n    <div\n      dangerouslySetInnerHTML={{\n        __html: marked(props.markdown, { renderer: renderer })\n      }}\n      id='preview'\n    />\n  );\n};\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n`;\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport './style.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}